#!/usr/bin/env bash
set -eu
[ "${BASH_VERSINFO[0]}" -ge 3 ] && set -o pipefail

get_platform () {
    local platform="$(uname | tr '[:upper:]' '[:lower:]')"

    case "$platform" in
        linux|freebsd)
            echo "Platform '${platform}' supported!" >&2
            # no need to change the platform variable
            ;;
        darwin)
            echo "Platform '${platform}' supported!" >&2
            # update platform to fit what is expected in url
            local platform="macos"
            ;;
        *)
            echo "Platform '${platform}' not supported!" >&2
            exit 1
            ;;
    esac

    echo -n $platform
}

get_arch () {
    local arch=""

    case "$(uname -m)" in
        x86_64|amd64) arch="x64"; ;;
        i686|i386) arch="ia32"; ;;
        *)
            echo "Arch '$(uname -m)' not supported!" >&2
            exit 1
            ;;
    esac

    echo -n $arch
}

my_mktemp () {
    local tempdir=""
    if [ "linux" = "$1" ] ; then
        tempdir=$(mktemp -d asdf-dart.XXXX)
    else
        tempdir=$(mktemp -d asdf-dart.XXXX)
    fi
    echo -n $tempdir
}

install_dart () {
    local install_type=$1
    local version=$2
    local install_path=$3
    local platform=$(get_platform)
    local arch=$(get_arch)
    local tempdir=$(my_mktemp $platform)
    local allow_extras=0
    local major_version=$(echo $version | cut -d "." -f1)

    echo "$install_type"
    echo "$version"
    echo "$install_path"
    echo "$platform"
    echo "$arch"
    echo "$tempdir"
    echo "$allow_extras"
    echo "$major_version"

    if [ $major_version -lt "2" ]; then
        allow_extras=1
    fi

    # install the sdk
    URL="https://storage.googleapis.com/dart-archive/channels/stable/release/${version}/sdk/dartsdk-${platform}-${arch}-release.zip"
    echo "Installing Dart SDK..."
    echo $URL
    curl $URL -o "${tempdir}/sdk.zip"

    if [ $allow_extras -eq "1" ]; then
        # install content_shell
        URL="https://storage.googleapis.com/dart-archive/channels/stable/release/${version}/dartium/content_shell-${platform}-${arch}-release.zip"
        echo "Installing Content Shell..."
        echo $URL
        curl $URL -o "${tempdir}/content_shell.zip"

        # install dartium
        URL="https://storage.googleapis.com/dart-archive/channels/stable/release/${version}/dartium/dartium-${platform}-${arch}-release.zip"
        echo "Installing Dartium..."
        echo $URL
        curl $URL -o "${tempdir}/dartium.zip"
    fi

    echo "Unzipping Dart SDK to $install_path..."
    unzip -d "$install_path" "$tempdir/sdk.zip" > /dev/null 2>&1
    if [ $allow_extras -eq "1" ]; then
        echo "Unzipping Content Shell to $install_path..."
        unzip -d "$install_path" "$tempdir/content_shell.zip" > /dev/null 2>&1
        echo "Unzipping Dartium to $install_path..."
        unzip -d "$install_path" "$tempdir/dartium.zip" > /dev/null 2>&1
        local dartium_dir=$(ls $ASDF_INSTALL_PATH | grep "dartium-")
        # default linux path
        local dartium_path="chrome"
        if [ "$platform" = "macos" ]; then
            dartium_path="Chromium.app/Contents/MacOS/Chromium"
        fi
        mv $install_path/$dartium_dir/$dartium_path $install_path/$dartium_dir/dartium
    fi

    rm -rf "${tempdir}"
}

install_dart $ASDF_INSTALL_TYPE $ASDF_INSTALL_VERSION $ASDF_INSTALL_PATH
